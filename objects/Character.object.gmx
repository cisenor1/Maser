<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprChar_walk_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Instantiate
bulletSpeed = 50 * delta_time / 1000000;
facing = 1; 
health = startingHealth; 
weapons[0] = getPistol();
weapons[1] = getRifle(); 
currentWeapon = 0;
shootCooldown = 0; 
global.char_image_speed = .15;
stamina = startingStamina;
image_speed = global.char_image_speed; 

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>Background</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for pickups

//Pickup?
if (place_meeting(x,y,pickup_base)){
    var pup = instance_place(x,y,pickup_base);
    switch (pup.type){
      case "ammo":
        var wep = weapons[currentWeapon];
        
        wep[global.ammo_key] += pup.count;
        break;
      case "health":
        health = min (health + pup.count,startingHealth);
        break; 
      case "stamina":
        stamina = min(stamina + pup.count,startingStamina);
        break;
      default:
        show_message("Don't know what type of pickup that is: " + string(pup.type));
    }
    with(pup){
      instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle inputs
var xMove,yMove,hSpeed,ySpeed,inputAction = 0;
xMove = getXMove(); 
yMove = getYMove();
var hSpeed = xMove * movementSpeed * delta_time / 1000000;
var vSpeed = yMove * movementSpeed * delta_time / 1000000;

// Tick away shooting delay.
if (shootCooldown &gt; 0){
    shootCooldown -= global.deltaTime;
}

 
//Horizontal Collision
if (place_meeting(x+hSpeed,y,Wall))
{ 
    while(!place_meeting(x+sign(hSpeed),y,Wall))
    {
        x += sign(hSpeed);
    }
    hSpeed = 0;
}

//Vertical Collision
if (place_meeting(x,y+vSpeed,Wall))
{ 
    while(!place_meeting(x,y+sign(vSpeed),Wall))
    {
        y += sign(vSpeed);
    }
    vSpeed = 0;
}// Check running
if (keyboard_check(vk_shift) &amp;&amp; stamina &gt; 0){
    vSpeed *= runSpeedMultiplier;
    hSpeed *= runSpeedMultiplier;
    if (vSpeed != 0 || hSpeed != 0){
      stamina -= staminaDepletionSpeed * global.deltaTime;
    }
}
x += hSpeed; 
y += vSpeed;


// Set facing
if (hSpeed &gt; 0){
  facing = 0;
}else if (hSpeed &lt; 0){
  facing = 2;
}else if (vSpeed &gt; 0){
  facing = 3;
}else if (vSpeed &lt; 0){
  facing = 1;
}

// Set sprite
if (vSpeed == 0 &amp;&amp; hSpeed == 0){
  image_speed = 0;
}else{
  switch(facing){
    case 0:
        sprite_index = sprChar_walk_right;
        break;
    case 1:
        sprite_index = sprChar_walk_up;
        break;
    case 2:
        sprite_index = sprChar_walk_left;
        break;
    case 3:
        sprite_index = sprChar_walk_down;
        break;
  };
  image_speed = global.char_image_speed;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>health -= 10;
currentWeapon = (currentWeapon + 1) % array_length_1d(weapons);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire 
if (shootCooldown &lt;= 0){
    var wep = weapons[currentWeapon];
    var ammo = wep[global.ammo_key];
    if (ammo &gt; 0){
        ammo--;
        wep[global.ammo_key] = ammo;
        weapons[currentWeapon] = wep;
        shootCooldown = wep[global.cooldown_key];
        audio_play_sound(wep[global.sound_key],1,false);
        var insBullet = instance_create(x, y,bullet);
        with (insBullet){ 
          damage = wep[global.damage_key];
          speed = 10    ;
          direction = point_direction(other.x,other.y,mouse_x,mouse_y);  
        }
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
